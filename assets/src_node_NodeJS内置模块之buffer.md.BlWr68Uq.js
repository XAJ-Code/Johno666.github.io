import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.C74PBEMI.js";const l="/PersonalBlog/assets/buffer1.6BeVCzw2.png",h="/PersonalBlog/assets/buffer2.BUkfcwAR.png",t="/PersonalBlog/assets/buffer3.Dlon8q8i.png",p="/PersonalBlog/assets/buffer4.B1G6znt0.png",k="/PersonalBlog/assets/buffer5.-JIHoY0l.png",b=JSON.parse('{"title":"NodeJS内置模块之buffer","description":"","frontmatter":{},"headers":[],"relativePath":"src/node/NodeJS内置模块之buffer.md","filePath":"src/node/NodeJS内置模块之buffer.md"}'),e={name:"src/node/NodeJS内置模块之buffer.md"},r=n('<h1 id="nodejs内置模块之buffer" tabindex="-1">NodeJS内置模块之buffer <a class="header-anchor" href="#nodejs内置模块之buffer" aria-label="Permalink to &quot;NodeJS内置模块之buffer&quot;">​</a></h1><h3 id="一、数据的二进制" tabindex="-1">一、数据的二进制 <a class="header-anchor" href="#一、数据的二进制" aria-label="Permalink to &quot;一、数据的二进制&quot;">​</a></h3><ol><li>计算机中所有的内容：文字、数字、图片、音频、视频最终都是以二进制的形式存储在计算机中</li><li>JavaScript可以直接处理非常直观的数据：比如字符串，就是纯文本，大多数也是通过这种文本来展示给用户</li><li>在前端领域，我们看到的图片或者视频并不是js在处理，而是浏览器根据我们指定的src地址去下载图片进行渲染的，其实在前端处理二进制数据我们接触过，就是前端上传文件，然后通过blob对象来存储二进制数据； <strong>对于服务器来说：</strong>，服务器要处理的文件类型就会有很多</li><li>比如某一个保存文本的文件使用 utf-8进行编码的，那么我们必须读取到他们的二进制数据，再通过utf-8转换成对应的文字；</li><li>比如我们需要读取的是一张图片数据（二进制），再通过某些手段对图片数据进行二次的处理（裁剪、格式转换、旋转、添加滤镜），Node中有一个Sharp的库，就是读取图片或者传入图片的Buffer对其再进行处理；</li><li>比如在Node中通过TCP建立长连接，TCP传输的是字节流，我们需要将数据转成字节再进行传入，并且需要知道传输字节的大小（客户端需要根据大小来判断读取多少内容）；</li></ol><h3 id="二、buffer和二进制" tabindex="-1">二、Buffer和二进制 <a class="header-anchor" href="#二、buffer和二进制" aria-label="Permalink to &quot;二、Buffer和二进制&quot;">​</a></h3><ol><li>对于服务端而言，需要做更多的功能，就需要直接去操作某一个文件的二进制数据</li><li>因此，NodeJs中给我提供了一个类(Buffer)，而且是全局的</li><li>Buffer的定义:就是用来存储二进制数据的一个数组</li><li><strong>bufeer中的每一项代表的是8位二进制</strong></li></ol><h5 id="为什么是8位" tabindex="-1">为什么是8位？ <a class="header-anchor" href="#为什么是8位" aria-label="Permalink to &quot;为什么是8位？&quot;">​</a></h5><ul><li><p>在计算机，一位二进制保存的数据非常有限，一般都不会直接操作一位</p></li><li><p>所以通常将8位合在一起作为一个储存单元，这个单元称之为<strong>一个字节(byte)</strong></p></li><li><p>也就是我们常说的<strong>1byte=8bit</strong>,<strong>1kb=1024byte</strong></p></li><li><p>例如很多编程语言中，int类型是4个字节，long类型是8个字节</p></li><li><p>例如RGB(255,255,255),是因为，R、G、B都是用一个字节来表示，而一个字节最大为1111,1111，8位1转换为10进制就是255，最大就是255 <strong>注:因此我们计算机不管表什么内容都是以字节为单位来计量，而Buffer就是用来操作二进制的一个容器，buffer数组中每一个表示的也是一个字节(8为二进制)</strong></p></li><li><p><img src="'+l+`" alt="image-20231028165624118"></p></li><li><p>BIN-二进制</p></li><li><p>OCT-八进制</p></li><li><p>DEC-十进制</p></li><li><p>HEX-16进制</p></li><li><p>因此，在计算机中，一个字节能表示的最大数字是255,能表示的数字范围是0~255</p></li><li><p>在buffer中，表示二进制数据通常用的是16进制，例如:一个buffer数组[1111 1111]，这表示一个字节的buffer数组，但是在Node中，他是这样表示的[FF],也就是它会把一个字节的前四位和后四位分别转为16进制来表示，有点绕，多读两遍！！！</p><h3 id="buffer和字符串" tabindex="-1">Buffer和字符串 <a class="header-anchor" href="#buffer和字符串" aria-label="Permalink to &quot;Buffer和字符串&quot;">​</a></h3></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建一个buffer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;Buffer 68 65 6c 6c 6f&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//当我们使用buffer来存储hello的时候，计算机会把hello根据ACSII的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//编码方式转换成对应的二进制存储到计算机，而buffer里面表示取的是16进制的形式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//可自行查阅ASCII码对照表检查</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建buffer--字符串带中文</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf2)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;Buffer e4 bd a0 e5 a5 bd&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对于中文--默认使用utf-8的编码方式，一个中文字符需要使用三个字节来表示才可以(包括中文状态下的符号)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//因此前三个16进制的字节表示‘你’,后三个表示‘好’</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注意:并不是所有中文字符都是用三个字节就可以表示完的,复杂的需要四个字节</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//可以调用toString()来解码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&#39;你好&#39;</span></span></code></pre></div><p><img src="`+h+`" alt="image-20231028173214110"></p><p><strong>buffer编码和解码指定编码方式</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建buffer---携带编码方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf16le&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定编码格式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//默认就是这个utf-8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf3, buf4)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;Buffer 60 4f 7d 59&gt; &lt;Buffer e4 bd a0 e5 a5 bd&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf16le&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//解码也需要指定格式,默认utf-8</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注意:如果编码和解码使用的方式不一样，那么就会出现乱码</span></span></code></pre></div><h4 id="三、buffer的其他创建方式" tabindex="-1">三、buffer的其他创建方式 <a class="header-anchor" href="#三、buffer的其他创建方式" aria-label="Permalink to &quot;三、buffer的其他创建方式&quot;">​</a></h4><ul><li><a href="https://nodejs.org/docs/latest-v18.x/api/buffer.html" target="_blank" rel="noreferrer">Buffer的相关API官网</a></li><li>buffer.alloc()--创建一个指定长度的buffer数组--申请内存</li></ul><div class="language-javaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//通过alloc创建buffer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建**一个字节**长度的buffer数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//当创建的buffer数组长度不够存储传入的字符的时候就会出现乱码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf1)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;Buffer 68&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//也可以创建一个指定长度的buffer对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf2)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;Buffer 00 00 00 00 00 00 00 00&gt;,此时buffer每一个字节都是空的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//手动访问buffer中的每一项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//0--访问的时候他是把十六机制转换成了十进制给我输出的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//手动设置buffer中的每一项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf2)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;Buffer 64 00 00 00 00 00 00 00&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//他会把它先转为16进制在存进去,如果你赋值的是一个16进制，那么就不再转化</span></span></code></pre></div><h4 id="四、nodejs中读取文件或者图片的二进制数据" tabindex="-1">四、NodeJs中读取文件或者图片的二进制数据 <a class="header-anchor" href="#四、nodejs中读取文件或者图片的二进制数据" aria-label="Permalink to &quot;四、NodeJs中读取文件或者图片的二进制数据&quot;">​</a></h4><ul><li>1、上一章讲过通过fs读取文件时，不指定解码格式，那么返回的就是一个buffer数组</li></ul><div class="language-javaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//test.txt的内容为:今天是周一,太棒了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./test.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;Buffer e4 bb 8a e5 a4 a9 e6 98 af e5 91 a8 e4 b8 80 2c e5 a4 aa e6 a3 92 e4 ba 86&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//读取图片的二进制--后期会讲到一个(sharp)的一个库，用于处理图片buffer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./01.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //返回就是这张图片对应的buffer数组--二进制数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;Buffer ff d8 ff e1 a3 f0 02 04 00 ... 3853408 more bytes&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="五、buffer底层原理知识" tabindex="-1">五、Buffer底层原理知识 <a class="header-anchor" href="#五、buffer底层原理知识" aria-label="Permalink to &quot;五、Buffer底层原理知识&quot;">​</a></h4><ul><li><p>在node源码中，其实做了一个性能优化，就是在我们创建buffer的时候，它默认第一次是会申请一个8*1024大小的内存空间，而不是我们频繁创建就频繁去向操作系统申请的</p></li><li><p>源码如下：</p></li><li><p><img src="`+t+'" alt="image-20231028200243065"></p></li><li><p>我们通过Buffer.from(&#39;Hello&#39;)，创建buffer时候会调用createPool(),默认会申请8kb大小的内存</p></li><li><p>BUffer.from（）源码：</p><p><img src="'+p+'" alt="image-20231028200538362"></p></li><li><p>就是判断一下传入的类型，如果字符串就会执行fromString():</p><p><img src="'+k+'" alt="image-20231028200703409"></p></li><li><p>然后在调用fromStringFast()，这个方法大致就是判断一下创建的字符串长度能不能在剩余的长度填充，可以就直接返回</p></li><li><p>如果不够就调用createPool()申请空间</p></li><li><p>注:加入传入的大于8*1024 &gt;&gt;&gt; 1 ,也就是4kb就直接创建传入大小的buffer，直接向操作系统申请，而不会用第一次申请的8kb来填充</p></li></ul>',19),E=[r];function d(g,f,o,y,c,u){return a(),i("div",null,E)}const A=s(e,[["render",d]]);export{b as __pageData,A as default};
